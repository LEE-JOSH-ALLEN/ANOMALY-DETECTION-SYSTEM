// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/anomaly_detection.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnomalyDetection_DetectAnomaly_FullMethodName       = "/anomalydetection.AnomalyDetection/DetectAnomaly"
	AnomalyDetection_StreamDetectAnomaly_FullMethodName = "/anomalydetection.AnomalyDetection/StreamDetectAnomaly"
)

// AnomalyDetectionClient is the client API for AnomalyDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnomalyDetectionClient interface {
	DetectAnomaly(ctx context.Context, in *AnomalyRequest, opts ...grpc.CallOption) (*AnomalyResponse, error)
	StreamDetectAnomaly(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AnomalyRequest, AnomalyResponse], error)
}

type anomalyDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewAnomalyDetectionClient(cc grpc.ClientConnInterface) AnomalyDetectionClient {
	return &anomalyDetectionClient{cc}
}

func (c *anomalyDetectionClient) DetectAnomaly(ctx context.Context, in *AnomalyRequest, opts ...grpc.CallOption) (*AnomalyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnomalyResponse)
	err := c.cc.Invoke(ctx, AnomalyDetection_DetectAnomaly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anomalyDetectionClient) StreamDetectAnomaly(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AnomalyRequest, AnomalyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AnomalyDetection_ServiceDesc.Streams[0], AnomalyDetection_StreamDetectAnomaly_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AnomalyRequest, AnomalyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnomalyDetection_StreamDetectAnomalyClient = grpc.BidiStreamingClient[AnomalyRequest, AnomalyResponse]

// AnomalyDetectionServer is the server API for AnomalyDetection service.
// All implementations must embed UnimplementedAnomalyDetectionServer
// for forward compatibility.
type AnomalyDetectionServer interface {
	DetectAnomaly(context.Context, *AnomalyRequest) (*AnomalyResponse, error)
	StreamDetectAnomaly(grpc.BidiStreamingServer[AnomalyRequest, AnomalyResponse]) error
	mustEmbedUnimplementedAnomalyDetectionServer()
}

// UnimplementedAnomalyDetectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnomalyDetectionServer struct{}

func (UnimplementedAnomalyDetectionServer) DetectAnomaly(context.Context, *AnomalyRequest) (*AnomalyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectAnomaly not implemented")
}
func (UnimplementedAnomalyDetectionServer) StreamDetectAnomaly(grpc.BidiStreamingServer[AnomalyRequest, AnomalyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDetectAnomaly not implemented")
}
func (UnimplementedAnomalyDetectionServer) mustEmbedUnimplementedAnomalyDetectionServer() {}
func (UnimplementedAnomalyDetectionServer) testEmbeddedByValue()                          {}

// UnsafeAnomalyDetectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnomalyDetectionServer will
// result in compilation errors.
type UnsafeAnomalyDetectionServer interface {
	mustEmbedUnimplementedAnomalyDetectionServer()
}

func RegisterAnomalyDetectionServer(s grpc.ServiceRegistrar, srv AnomalyDetectionServer) {
	// If the following call pancis, it indicates UnimplementedAnomalyDetectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnomalyDetection_ServiceDesc, srv)
}

func _AnomalyDetection_DetectAnomaly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnomalyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnomalyDetectionServer).DetectAnomaly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnomalyDetection_DetectAnomaly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnomalyDetectionServer).DetectAnomaly(ctx, req.(*AnomalyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnomalyDetection_StreamDetectAnomaly_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnomalyDetectionServer).StreamDetectAnomaly(&grpc.GenericServerStream[AnomalyRequest, AnomalyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnomalyDetection_StreamDetectAnomalyServer = grpc.BidiStreamingServer[AnomalyRequest, AnomalyResponse]

// AnomalyDetection_ServiceDesc is the grpc.ServiceDesc for AnomalyDetection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnomalyDetection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anomalydetection.AnomalyDetection",
	HandlerType: (*AnomalyDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectAnomaly",
			Handler:    _AnomalyDetection_DetectAnomaly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDetectAnomaly",
			Handler:       _AnomalyDetection_StreamDetectAnomaly_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/anomaly_detection.proto",
}
